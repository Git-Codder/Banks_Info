body{
    font-size: 00.92em;
}

.table-sortable th {
    cursor: pointer;
  }
  
  /* .table-sortable .th-sort-asc::after {
    content: "\25b4";
  }
  
  .table-sortable .th-sort-desc::after {
    content: "\25be";
  }
  
  .table-sortable .th-sort-asc::after,
  .table-sortable .th-sort-desc::after {
    margin-left: 5px;
  }
  
  .table-sortable .th-sort-asc,
  .table-sortable .th-sort-desc {
    background: rgba(0, 0, 0, 0.1);
  } */
  


/* for pagination button  */
.pagination button {
    border-radius: 5px;
  }




/* css for zoom on hover nav link paging */
.zoom {
    transition: transform .2s; /* Animation */
    margin-left: 0.5em;
    margin-right: 0.5em;
  }
  
  .zoom:hover {
    transform: scale(1.75); /* (150% zoom - Note: if the zoom is too large, it will go outside of the viewport) */
  }




/* css for nav link icon */
a.nav-link {
    display: flex;
    align-items: center;
}

.material-icons {
    vertical-align: middle;
  }




/* css for change the checkbox in particular icon (star) */
.star {
    visibility:hidden;
    font-size:40px;
    cursor:pointer;
    
}
.star:before {
    color:navy;
    font-family: "Font Awesome 5 Free";
    font-size: 0.75em;
   content: "\2606";
   position: absolute;
   text-align: justify;
   vertical-align: middle;
   visibility:visible;
   display: flex;
  flex-direction: column;
  justify-content: center;
  height: 10px;
}
.star:checked:before {
    color: hotpink;
    
    font-family: "Font Awesome 5 Free";
    font-size: 0.75em;
   content: "\2605";
   position: absolute;
   text-align: justify;
   vertical-align: middle;
   display: flex;
  flex-direction: column;
  justify-content: center;
    height: 10px;
}

.flex-container {
display: flex;
}


/* css for jumbotron flex class */
.flex-child {
flex: 1;
}  

.flex-child:first-child {
margin-right: 20px;
} 

.select:hover {
display: block;
}


/* 
    // unused links

    <script src="https://cdn.datatables.net/1.10.24/js/jquery.dataTables.min.js"></script>
    <script src="//netdna.bootstrapcdn.com/bootstrap/3.3.4/js/bootstrap.min.js"></script>
    <script src="//raw.github.com/botmonster/jquery-bootpag/master/lib/jquery.bootpag.min.js"></script>
    <script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.1.1/jquery.min.js"></script>
    <script src="https://code.jquery.com/jquery-3.1.1.min.js"></script>
    <script src="https://code.jquery.com/jquery-3.4.1.slim.min.js" integrity="sha384-J6qa4849blE2+poT4WnyKhv5vZF5SrPo0iEjwBvKU7imGFAV0wwj1yYfoRSJoZ+n" crossorigin="anonymous"></script>

*/

/* 
    // letter may be used code

     <table class="table table-hover" style=" width: 66%; margin-top: 2%; margin-left: 15%; margin-left: 15%; position: relative; " >
            <thead class="thead-dark">
            <tr>
                <% banksTitle.forEach(element => { %>
                    <th scope="col"><%= element %> </th>
                <%  }); %>
        
            </tr>
            </thead>

            <tbody>
                <% var cnt = 1; %> 
                <% banksData.forEach(data => { %>
                    <tr>
                        <th scope="row"><%= cnt %> </th>
                        <td> <%= data.ifsc %> </td>
                        <td> <%= data.bank_id %> </td>
                        <td> <%= data.branch %> </td>
                        <td> <%= data.address %> </td>
                        <td> <%= data.city %> </td>
                        <td> <%= data.district %> </td>
                        <td> <%= data.state %> </td>
                        
                    </tr>
                <%  cnt++; }); %>
            </tbody>

        </table>

*/

/* 

    // May be letter usefull javascript code

    app.post("/", async(req,res,body) => {
        try {

            if(city == undefined){
                city = "Bangalore";
            }

            if(req.body.selected_city != undefined){
                var city = '%' + req.body.selected_city.toUpperCase() + '%';
            }else{
                var city = 'Bangalore';
            }


            if(req.body.selected_city != undefined){
                var limit = req.body.selected_limit;
            }else{
                var limit = 25;
            }

            if(req.body.selected_city != undefined){
                var offset = req.body.selected_offset;
            }else{
                var offset = 0;
            }
            
            const values = [ city, limit, offset];

            const data = await pool.query("SELECT * FROM branches WHERE branch LIKE $1 "
                                            + "or address LIKE $1 or city LIKE $1 or "
                                            + "district LIKE $1 or state LIKE $1"
                                            + "ORDER BY ifsc ASC LIMIT $2 OFFSET $3",
                                            values);


            // var options = {
            //     method: 'GET',
            //     url: 'https://flye-backend-avikant.herokuapp.com/api/branches?q='+ city + '&limit=' + limit + '&offset=' + offset
            //     // url: 'https://flye-backend-avikant.herokuapp.com/api/branches/autocomplete?q=bangalore&limit=5&offset=1'
            // };

            // console.log(options.url);
            // request(options,async(err,res,body) => {
            //     try {
            //         var ok = true;
            //         console.log(body);
            //         res.render("index.ejs",{banksData: body, banksTitle: banksTitle, ok : ok});
            //     } catch (err) {
            //         console.log(err.message);
            //         res.render("index.ejs");
            //     }
            // });

            // console.log(data);
            var banksData = data.rows;
            // console.log(banksData);
            res.render("index.ejs",{banksData: banksData, banksTitle: banksTitle, ok : true});

        } catch (err) {
            console.log(err.message);
        }
    });
    

*/

/* 
    // debug code

    console.log("\n*****************\n");
    console.log("start : " + start);
    console.log("PN : "+ page_number);
    console.log("MPN : "+maxPageNumber);
    console.log("PL : " + pageLimit);
    console.log("L : "+limit);

*/

/*
    // Add Favorite button Funtion
    // function to update the information of the Add Favorite button

    // function updateButtionInfo(tdCheckboxChecked){
    //     // get buttion 
    //     button = $(document).find('#AddFavorite');
    //     // check if any fav checked than show add fav button
    //     if(tdCheckboxChecked == 0){
            
    //         button.css("visibility", "hidden");
    //         button.html('Add Favorite');
    //     }else{
    //         button.css("visibility", "visible");
    //     }
    // }

    // // fucntion change the inner html of the Add Favoutite button;
    // function addFav(button){
    //     if(true){
    //         button.html('Add Favorite');
    //     }else{
    //         button.html('Favorite Added!');
    //     }
    // }


*/

/* 

    // function to sort table may be use later 

    // Sorts a HTML table.
    // @param {HTMLTableElement} table The table to sort
    // @param {number} column The index of the column to sort
    // @param {boolean} asc Determines if the sorting will be in ascending

 function sortTableByColumn(table, column, asc = true) {
    const dirModifier = asc ? 1 : -1;
    const tBody = table.tBodies[0];
    const rows = Array.from(tBody.querySelectorAll("tr"));

    // Sort each row
    const sortedRows = rows.sort((a, b) => {
        const aColText = a.querySelector(`td:nth-child(${ column + 1 })`).textContent.trim();
        const bColText = b.querySelector(`td:nth-child(${ column + 1 })`).textContent.trim();

        return aColText > bColText ? (1 * dirModifier) : (-1 * dirModifier);
    });

    // Remove all existing TRs from the table
    while (tBody.firstChild) {
        tBody.removeChild(tBody.firstChild);
    }

    // Re-add the newly sorted rows
    tBody.append(...sortedRows);

    // Remember how the column is currently sorted
    table.querySelectorAll("th").forEach(th => th.classList.remove("th-sort-asc", "th-sort-desc"));
    table.querySelector(`th:nth-child(${ column + 1})`).classList.toggle("th-sort-asc", asc);
    table.querySelector(`th:nth-child(${ column + 1})`).classList.toggle("th-sort-desc", !asc);
}

document.querySelectorAll(".table-sortable th").forEach(headerCell => {
    headerCell.addEventListener("click", () => {
        const tableElement = headerCell.parentElement.parentElement.parentElement;
        const headerIndex = Array.prototype.indexOf.call(headerCell.parentElement.children, headerCell);
        const currentIsAscending = headerCell.classList.contains("th-sort-asc");

        sortTableByColumn(tableElement, headerIndex, !currentIsAscending);
    });
});


*/





